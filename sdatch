#!/usr/bin/env python3

"""
@author Yi Chen
@date Jul 6 2021
"""

import argparse
import tempfile
from datetime import date
import subprocess
import os.path
import shutil


def calc_hours(walltime_str):
    days = 0
    if ("-" in walltime_str):
        days, walltime_str, *tmp = walltime_str.split("-")
    hours, minutes, seconds = [int(i) for i in walltime_str.split(":")]
    hours = hours + int(days)*24 + minutes*0.001 + seconds*0.001
    return(hours)

def set_defaults(params):
    today=date.today()
    if (params.name == None):
        params.name = os.path.splitext(os.path.basename(params.command[0]))[0]
    params.log = "~/logs/" + params.name + "_" + today.strftime("%m%d%Y") + \
        ".log"
    params.mail = "END,TIME_LIMIT_80"
    hours = calc_hours(params.time)
    if (hours <= 48):
        params.qos = "dpart"
    else:
        params.qos = "scavenger"
    return(params)

def run_anyways():
    run = None
    while(run != "y" and run != "n"):
        run = input("run anyways? y/n ").strip().lower()[0]
    if(run == "y"):
        return
    else:
        exit()

def check_script(command):
    if(os.path.isfile(command[0])): #running via file; so check for shebang
        with open(command[0]) as f:
            firstline = f.readline().split()
            if(firstline[0].startswith("#!")):
                if(len(firstline) == 1):
                    return
                else: #check if in path
                    if(shutil.which(firstline[1])):
                        return
                    else:
                        print("Cannot find script: " + firstline[1])
                        run_anyways()
    else: #check if in path
        if(shutil.which(command[0])):
            return
        else:
            print("Cannot find script: " + command[0])
            run_anyways()

def write_command_script(command, params):
    temp = tempfile.NamedTemporaryFile(mode="w", delete=False)

    temp.write("#!/bin/bash\n")
    temp.write("\n")
    temp.write("echo '#!/bin/bash'\n")
    temp.write("echo '#SBATCH -J " + params.name + "'\n")
    temp.write("echo '#SBATCH --cpus-per-task=" + str(params.cpus) + "'\n")
    temp.write("echo '#SBATCH --mem=" + str(params.mem) + "G'\n")
    temp.write("echo '#SBATCH --time=" + params.time + "'\n")
    temp.write("echo '#SBATCH --qos=" + params.qos + "'\n")
    temp.write("echo '#SBATCH -o " + params.log + "'\n")
    temp.write("echo '#SBATCH --mail-type=" + params.mail + "'\n")
    temp.write("echo 'jobid: $SLURM_JOB_ID'\n")
    temp.write("echo '" + " ".join(command) + "'\n")
    temp.write(" ".join(command))

    temp.close()
    return temp.name

def submit_script(tfname, params):
    submission = "sbatch" + \
        " -J " + params.name + \
        " --cpus-per-task=" + str(params.cpus) + \
        " --mem=" + str(params.mem) + "G" + \
        " --time=" + params.time + \
        " --qos=" + params.qos + \
        " --mail-type=" + params.mail + \
        " --output=" + params.log + \
        " " + tfname
    if(params.dryrun):
        print(tfname)
        print(submission)
    else:
        subprocess.run(submission.split())
        return 
    


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Wrapper script for sbatch.")
    parser.add_argument("-n", "--name", metavar="Job Name", help="Job Name")
    parser.add_argument("-c", "--cpus", default=1, type=int, metavar="N",
            help="Number of cores")
    parser.add_argument("-m", "--mem", default=2, type=int, metavar="N",
            help="Memory allocated (in gigabytes)")
    parser.add_argument("-t", "--time", default="2:00:00",
            metavar="d-hh:mm:ss", help="time limit")
    parser.add_argument("-d", "--dryrun", default=False, action='store_true',
            help="""Do not submit the script, only prints the name of the script
            and how it would submission command.""")
    parser.add_argument("command", metavar="CMD", nargs=argparse.REMAINDER,
            help="command to schedule")
    params = parser.parse_args()
    params = set_defaults(params)
    check_script(params.command)
    tfname = write_command_script(params.command, params)
    submit_script(tfname, params)
    
